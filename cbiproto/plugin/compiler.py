import os.path
import textwrap

try:
    # cbiproto[compiler] specific dependencies
    import black
    import isort.api
    import jinja2
except ImportError as err:
    print(
        "\033[31m"
        f"Unable to import `{err.name}` from cbiproto plugin! "
        "Please ensure that you've installed cbiproto as "
        '`pip install "cbiproto[compiler]"` so that compiler dependencies '
        "are included."
        "\033[0m"
    )
    raise SystemExit(1)

from .formatter import Formatter
from .models import OutputTemplate


def with_header(code: str) -> str:
    header = textwrap.dedent(
        """
        # Generated by the protocol buffer compiler.  DO NOT EDIT!
        # type: ignore
        # flake8: noqa
        # nopycln: file
        # pyright: ignore
        # mypy: ignore-errors
        # fmt: off
        """
    ).lstrip()
    return header + code


def outputfile_compiler(output_file: OutputTemplate) -> str:
    formatter = Formatter()
    formatter.writeline("# plugin: python-cbiproto")
    formatter.writeline("# sources: " + ", ".join(output_file.input_filenames))
    formatter.newline()
    formatter.writeline("from __future__ import annotations")
    formatter.newline()
    for mod in output_file.python_module_imports:
        formatter.writeline(f"import {mod}")
    formatter.newline()
    formatter.writeline("import cbiproto")
    formatter.newline()

    if output_file.datetime_imports:
        dt_imports = ", ".join(output_file.datetime_imports)
        formatter.writeline(f"from datetime import {dt_imports}")
    formatter.newline()

    if output_file.imports_type_checking_only:
        output_file.typing_imports.add("TYPE_CHECKING")

    if output_file.typing_imports:
        typing_imports = ", ".join(output_file.typing_imports)
        formatter.writeline(f"from typing import {typing_imports}")

    formatter.newline()

    for mod in output_file.imports:
        formatter.writeline(mod)

    if output_file.imports_type_checking_only:
        formatter.writeline("if TYPE_CHECKING:")
        with formatter.block():
            for mod in output_file.imports_type_checking_only:
                formatter.writeline(mod)

    for e in output_file.enums:
        formatter.writelines(e.render())
    formatter.newline()
    for e in output_file.messages:
        formatter.writelines(e.render())
    formatter.newline()
    for e in output_file.services:
        formatter.writelines(e.render_client())
    formatter.newline()
    for e in output_file.services:
        formatter.writelines(e.render_server())

    code = str(formatter)
    code = isort.api.sort_code_string(
        code=code,
        show_diff=False,
        py_version=37,
        profile="black",
        combine_as_imports=True,
        lines_after_imports=2,
        quiet=True,
        force_grid_wrap=2,
        known_third_party=["grpc", "cbiproto"],
    )
    return with_header(black.format_str(code, mode=black.FileMode(line_length=120)))
