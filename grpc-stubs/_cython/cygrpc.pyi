from typing import Any, ClassVar

import enum
import logging
EOF: _EOF
GRPC_COMPRESSION_CHANNEL_DEFAULT_ALGORITHM: bytes
GRPC_COMPRESSION_REQUEST_ALGORITHM_MD_KEY: bytes
TYPE_METADATA_STRING: str
_AWAIT_THREADS_TIMEOUT_SECONDS: int
_COMPRESSION_METADATA_STRING_MAPPING: dict
_EMPTY_FLAGS: int
_EMPTY_MASK: int
_GRPC_ENABLE_FORK_SUPPORT: bool
_IMMUTABLE_EMPTY_METADATA: tuple
_INTERNAL_CALL_ERROR_MESSAGE_FORMAT: str
_LOGGER: logging.Logger
_NON_OK_CALL_REPRESENTATION: str
_OK_CALL_REPRESENTATION: str
_TRUE_VALUES: list
_UNKNOWN_CANCELLATION_DETAILS: str
_fork_handler_failed: bool
_fork_state: _ForkState
g_gevent_activated: bool
g_gevent_pool: None
g_gevent_threadpool: None
gevent_hub: None

class ALTSChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class AbortError(BaseError): ...

class AioChannel:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def call(self, *args, **kwargs) -> Any: ...
    def check_connectivity_state(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def closed(self, *args, **kwargs) -> Any: ...
    def closing(self, *args, **kwargs) -> Any: ...
    def watch_connectivity_state(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class AioRpcStatus(Exception):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _code: Any
    _debug_error_string: Any
    _details: Any
    _trailing_metadata: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def code(self, *args, **kwargs) -> Any: ...
    def debug_error_string(self, *args, **kwargs) -> Any: ...
    def details(self, *args, **kwargs) -> Any: ...
    def trailing_metadata(self, *args, **kwargs) -> Any: ...
    def __reduce_cython__(self, *args, **kwargs) -> Any: ...
    def __setstate_cython__(self, *args, **kwargs) -> Any: ...

class AioServer:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _request_call(self, *args, **kwargs) -> Any: ...
    def _server_main_loop(self, *args, **kwargs) -> Any: ...
    def _serving_task_crash_handler(self, *args, **kwargs) -> Any: ...
    def _start_shutting_down(self, *args, **kwargs) -> Any: ...
    def add_generic_rpc_handlers(self, *args, **kwargs) -> Any: ...
    def add_insecure_port(self, *args, **kwargs) -> Any: ...
    def add_secure_port(self, *args, **kwargs) -> Any: ...
    def is_running(self, *args, **kwargs) -> Any: ...
    def shutdown(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...
    def wait_for_termination(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class AsyncIOEngine(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    CUSTOM_IO_MANAGER: ClassVar[AsyncIOEngine] = ...
    POLLER: ClassVar[AsyncIOEngine] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class BaseCompletionQueue:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseError(Exception): ...

class BatchOperationEvent:
    batch_operations: Any
    completion_type: Any
    success: Any
    tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Call:
    is_valid: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _custom_op_on_c_call(self, *args, **kwargs) -> Any: ...
    def _start_batch(self, *args, **kwargs) -> Any: ...
    def cancel(self, *args, **kwargs) -> Any: ...
    def peer(self, *args, **kwargs) -> Any: ...
    def set_credentials(self, *args, **kwargs) -> Any: ...
    def start_client_batch(self, *args, **kwargs) -> Any: ...
    def start_server_batch(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallCredentials:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallDetails:
    deadline: Any
    host: Any
    method: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallError:
    already_accepted: ClassVar[int] = ...
    already_finished: ClassVar[int] = ...
    already_invoked: ClassVar[int] = ...
    error: ClassVar[int] = ...
    invalid_flags: ClassVar[int] = ...
    invalid_metadata: ClassVar[int] = ...
    not_invoked: ClassVar[int] = ...
    not_on_client: ClassVar[int] = ...
    not_on_server: ClassVar[int] = ...
    ok: ClassVar[int] = ...
    too_many_operations: ClassVar[int] = ...

class CallbackFailureHandler:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallbackWrapper:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CensusContext:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Channel:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def check_connectivity_state(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def close_on_fork(self, *args, **kwargs) -> Any: ...
    def integrated_call(self, *args, **kwargs) -> Any: ...
    def next_call_event(self, *args, **kwargs) -> Any: ...
    def segregated_call(self, *args, **kwargs) -> Any: ...
    def target(self, *args, **kwargs) -> Any: ...
    def watch_connectivity_state(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ChannelArgKey:
    default_authority: ClassVar[bytes] = ...
    enable_census: ClassVar[bytes] = ...
    http2_initial_sequence_number: ClassVar[bytes] = ...
    max_concurrent_streams: ClassVar[bytes] = ...
    max_receive_message_length: ClassVar[bytes] = ...
    max_send_message_length: ClassVar[bytes] = ...
    primary_user_agent_string: ClassVar[bytes] = ...
    secondary_user_agent_string: ClassVar[bytes] = ...
    ssl_session_cache: ClassVar[bytes] = ...
    ssl_target_name_override: ClassVar[bytes] = ...

class ChannelCredentials:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompletionQueue:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _internal_poll(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def poll(self, *args, **kwargs) -> Any: ...
    def shutdown(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompletionType:
    operation_complete: ClassVar[int] = ...
    queue_shutdown: ClassVar[int] = ...
    queue_timeout: ClassVar[int] = ...

class CompositeCallCredentials(CallCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _call_credentialses: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompositeChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _call_credentialses: Any
    _channel_credentials: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompressionAlgorithm:
    deflate: ClassVar[int] = ...
    gzip: ClassVar[int] = ...
    none: ClassVar[int] = ...

class CompressionLevel:
    high: ClassVar[int] = ...
    low: ClassVar[int] = ...
    medium: ClassVar[int] = ...
    none: ClassVar[int] = ...

class CompressionOptions:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def disable_algorithm(self, *args, **kwargs) -> Any: ...
    def enable_algorithm(self, *args, **kwargs) -> Any: ...
    def is_algorithm_enabled(self, *args, **kwargs) -> Any: ...
    def to_channel_arg(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ComputeEngineChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConnectivityEvent:
    completion_type: Any
    success: Any
    tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConnectivityState:
    connecting: ClassVar[int] = ...
    idle: ClassVar[int] = ...
    ready: ClassVar[int] = ...
    shutdown: ClassVar[int] = ...
    transient_failure: ClassVar[int] = ...

class ExecuteBatchError(InternalError): ...

class ForkManagedThread:
    def __init__(self, *args, **kwargs) -> None: ...
    def join(self, *args, **kwargs) -> Any: ...
    def setDaemon(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...

class GrpcCallWrapper:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class InitialMetadataFlags:
    used_mask: ClassVar[int] = ...
    wait_for_ready: ClassVar[int] = ...
    wait_for_ready_explicitly_set: ClassVar[int] = ...

class InsecureChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IntegratedCall:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def cancel(self, *args, **kwargs) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class InternalError(BaseError): ...

class LocalChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class LocalConnectionType:
    local_tcp: ClassVar[int] = ...
    uds: ClassVar[int] = ...

class MetadataPluginCallCredentials(CallCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _metadata_plugin: Any
    _name: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Operation:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class OperationType:
    receive_close_on_server: ClassVar[int] = ...
    receive_initial_metadata: ClassVar[int] = ...
    receive_message: ClassVar[int] = ...
    receive_status_on_client: ClassVar[int] = ...
    send_close_from_client: ClassVar[int] = ...
    send_initial_metadata: ClassVar[int] = ...
    send_message: ClassVar[int] = ...
    send_status_from_server: ClassVar[int] = ...

class PollerCompletionQueue(BaseCompletionQueue):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _handle_events(self, *args, **kwargs) -> Any: ...
    def _poll_wrapper(self, *args, **kwargs) -> Any: ...
    def bind_loop(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PropagationConstants:
    GRPC_PROPAGATE_CANCELLATION: ClassVar[int] = ...
    GRPC_PROPAGATE_CENSUS_STATS_CONTEXT: ClassVar[int] = ...
    GRPC_PROPAGATE_CENSUS_TRACING_CONTEXT: ClassVar[int] = ...
    GRPC_PROPAGATE_DEADLINE: ClassVar[int] = ...
    GRPC_PROPAGATE_DEFAULTS: ClassVar[int] = ...

class RPCState(GrpcCallWrapper):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ReceiveCloseOnServerOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def cancelled(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ReceiveInitialMetadataOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def initial_metadata(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ReceiveMessageOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def message(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ReceiveStatusOnClientOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def code(self, *args, **kwargs) -> Any: ...
    def details(self, *args, **kwargs) -> Any: ...
    def error_string(self, *args, **kwargs) -> Any: ...
    def trailing_metadata(self, *args, **kwargs) -> Any: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RequestCallEvent:
    call: Any
    call_details: Any
    completion_type: Any
    invocation_metadata: Any
    success: Any
    tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SSLChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _certificate_chain: Any
    _pem_root_certificates: Any
    _private_key: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SSLSessionCacheLRU:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __int__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SegregatedCall:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def cancel(self, *args, **kwargs) -> Any: ...
    def next_event(self, *args, **kwargs) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SendCloseFromClientOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SendInitialMetadataOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    _initial_metadata: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SendMessageOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _flags: Any
    _message: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SendStatusFromServerOperation(Operation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _code: Any
    _details: Any
    _flags: Any
    _trailing_metadata: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def type(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Server:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def add_http2_port(self, *args, **kwargs) -> Any: ...
    def cancel_all_calls(self, *args, **kwargs) -> Any: ...
    def destroy(self, *args, **kwargs) -> Any: ...
    def register_completion_queue(self, *args, **kwargs) -> Any: ...
    def request_call(self, *args, **kwargs) -> Any: ...
    def shutdown(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ServerCertificateConfig:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ServerCredentials:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ServerShutdownEvent:
    completion_type: Any
    success: Any
    tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SslPemKeyCertPair:
    certificate_chain: Any
    private_key: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StatusCode:
    aborted: ClassVar[int] = ...
    already_exists: ClassVar[int] = ...
    cancelled: ClassVar[int] = ...
    data_loss: ClassVar[int] = ...
    deadline_exceeded: ClassVar[int] = ...
    failed_precondition: ClassVar[int] = ...
    internal: ClassVar[int] = ...
    invalid_argument: ClassVar[int] = ...
    not_found: ClassVar[int] = ...
    ok: ClassVar[int] = ...
    out_of_range: ClassVar[int] = ...
    permission_denied: ClassVar[int] = ...
    resource_exhausted: ClassVar[int] = ...
    unauthenticated: ClassVar[int] = ...
    unavailable: ClassVar[int] = ...
    unimplemented: ClassVar[int] = ...
    unknown: ClassVar[int] = ...

class UsageError(BaseError): ...

class WriteFlag:
    buffer_hint: ClassVar[int] = ...
    no_compress: ClassVar[int] = ...

class XDSChannelCredentials(ChannelCredentials):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _fallback_credentials: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ActiveThreadCount:
    def __init__(self, *args, **kwargs) -> None: ...
    def await_zero_threads(self, *args, **kwargs) -> Any: ...
    def decrement(self, *args, **kwargs) -> Any: ...
    def increment(self, *args, **kwargs) -> Any: ...

class _AioCall(GrpcCallWrapper):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _channel: Any
    _initial_metadata: Any
    _status: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _handle_status_once_received(self, *args, **kwargs) -> Any: ...
    def _repr(self, *args, **kwargs) -> Any: ...
    def add_done_callback(self, *args, **kwargs) -> Any: ...
    def cancel(self, *args, **kwargs) -> Any: ...
    def cancelled(self, *args, **kwargs) -> Any: ...
    def done(self, *args, **kwargs) -> Any: ...
    def initial_metadata(self, *args, **kwargs) -> Any: ...
    def initiate_stream_stream(self, *args, **kwargs) -> Any: ...
    def initiate_unary_stream(self, *args, **kwargs) -> Any: ...
    def is_locally_cancelled(self, *args, **kwargs) -> Any: ...
    def is_ok(self, *args, **kwargs) -> Any: ...
    def receive_serialized_message(self, *args, **kwargs) -> Any: ...
    def send_receive_close(self, *args, **kwargs) -> Any: ...
    def send_serialized_message(self, *args, **kwargs) -> Any: ...
    def status(self, *args, **kwargs) -> Any: ...
    def stream_unary(self, *args, **kwargs) -> Any: ...
    def time_remaining(self, *args, **kwargs) -> Any: ...
    def unary_unary(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _AioState:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _BatchOperationTag(_Tag):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _operations: Any
    _retained_call: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _BoundEventLoop:
    loop: Any
    read_socket: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CallState:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ChannelArg:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ChannelArgs:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _arguments: Any
    _references: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ChannelState:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ConcurrentRpcLimiter:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _decrease_active_rpcs_count(self, *args, **kwargs) -> Any: ...
    def _decrease_active_rpcs_count_with_lock(self, *args, **kwargs) -> Any: ...
    def check_before_request_call(self, *args, **kwargs) -> Any: ...
    def decrease_once_finished(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ConnectivityTag(_Tag):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _user_tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _EOF:
    def _repr(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...

class _ForkState:
    def __init__(self, *args, **kwargs) -> None: ...

class _GrpcArgWrapper:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _HandlerCallDetails:
    invocation_metadata: Any
    method: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _LatentEventArg:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class _MessageReceiver:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _async_message_receiver(self, *args, **kwargs) -> Any: ...
    def __aiter__(self, *args, **kwargs) -> Any: ...
    def __anext__(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Metadatum(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _replace: ClassVar[function] = ...
    __getnewargs__: ClassVar[function] = ...
    __match_args__: ClassVar[tuple] = ...
    __slots__: ClassVar[tuple] = ...
    key: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(cls, *args, **kwargs) -> Any: ...

class _RequestCallError(Exception): ...

class _RequestCallTag(_Tag):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _user_tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ServerShutdownTag(_Tag):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _shutting_down_server: Any
    _user_tag: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ServerStoppedError(BaseError): ...

class _ServicerContext:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def abort(self, *args, **kwargs) -> Any: ...
    def abort_with_status(self, *args, **kwargs) -> Any: ...
    def add_done_callback(self, *args, **kwargs) -> Any: ...
    def auth_context(self, *args, **kwargs) -> Any: ...
    def cancelled(self, *args, **kwargs) -> Any: ...
    def code(self, *args, **kwargs) -> Any: ...
    def details(self, *args, **kwargs) -> Any: ...
    def disable_next_message_compression(self, *args, **kwargs) -> Any: ...
    def done(self, *args, **kwargs) -> Any: ...
    def invocation_metadata(self, *args, **kwargs) -> Any: ...
    def peer(self, *args, **kwargs) -> Any: ...
    def peer_identities(self, *args, **kwargs) -> Any: ...
    def peer_identity_key(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def send_initial_metadata(self, *args, **kwargs) -> Any: ...
    def set_code(self, *args, **kwargs) -> Any: ...
    def set_compression(self, *args, **kwargs) -> Any: ...
    def set_details(self, *args, **kwargs) -> Any: ...
    def set_trailing_metadata(self, *args, **kwargs) -> Any: ...
    def time_remaining(self, *args, **kwargs) -> Any: ...
    def trailing_metadata(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _SyncServicerContext:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def abort(self, *args, **kwargs) -> Any: ...
    def add_callback(self, *args, **kwargs) -> Any: ...
    def auth_context(self, *args, **kwargs) -> Any: ...
    def disable_next_message_compression(self, *args, **kwargs) -> Any: ...
    def invocation_metadata(self, *args, **kwargs) -> Any: ...
    def peer(self, *args, **kwargs) -> Any: ...
    def peer_identities(self, *args, **kwargs) -> Any: ...
    def peer_identity_key(self, *args, **kwargs) -> Any: ...
    def send_initial_metadata(self, *args, **kwargs) -> Any: ...
    def set_code(self, *args, **kwargs) -> Any: ...
    def set_compression(self, *args, **kwargs) -> Any: ...
    def set_details(self, *args, **kwargs) -> Any: ...
    def set_trailing_metadata(self, *args, **kwargs) -> Any: ...
    def time_remaining(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Tag:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _WatchConnectivityFailed(Exception): ...

def __pyx_unpickle_AioServer(*args, **kwargs) -> Any: ...
def __pyx_unpickle_CensusContext(*args, **kwargs) -> Any: ...
def __pyx_unpickle_ChannelCredentials(*args, **kwargs) -> Any: ...
def __pyx_unpickle_InsecureChannelCredentials(*args, **kwargs) -> Any: ...
def __pyx_unpickle__Tag(*args, **kwargs) -> Any: ...
def _contextvars_supported(*args, **kwargs) -> Any: ...
def _find_method_handler(*args, **kwargs) -> Any: ...
def _finish_handler_with_stream_responses(*args, **kwargs) -> Any: ...
def _finish_handler_with_unary_response(*args, **kwargs) -> Any: ...
def _grpc_shutdown_wrapper(*args, **kwargs) -> Any: ...
def _handle_callback_wrapper(*args, **kwargs) -> Any: ...
def _handle_cancellation_from_core(*args, **kwargs) -> Any: ...
def _handle_exceptions(*args, **kwargs) -> Any: ...
def _handle_rpc(*args, **kwargs) -> Any: ...
def _handle_stream_stream_rpc(*args, **kwargs) -> Any: ...
def _handle_stream_unary_rpc(*args, **kwargs) -> Any: ...
def _handle_unary_stream_rpc(*args, **kwargs) -> Any: ...
def _handle_unary_unary_rpc(*args, **kwargs) -> Any: ...
def _is_async_handler(*args, **kwargs) -> Any: ...
def _receive_initial_metadata(*args, **kwargs) -> Any: ...
def _receive_message(*args, **kwargs) -> Any: ...
def _run_interceptor(*args, **kwargs) -> Any: ...
def _run_with_context(*args, **kwargs) -> Any: ...
def _schedule_rpc_coro(*args, **kwargs) -> Any: ...
def _send_error_status_from_server(*args, **kwargs) -> Any: ...
def _send_initial_metadata(*args, **kwargs) -> Any: ...
def _send_message(*args, **kwargs) -> Any: ...
def _spawn_callback_async(*args, **kwargs) -> Any: ...
def _spawn_callback_in_thread(*args, **kwargs) -> Any: ...
def async_callback_func(*args, **kwargs) -> Any: ...
def async_generator_to_generator(*args, **kwargs) -> Any: ...
def auth_context(*args, **kwargs) -> Any: ...
def block_if_fork_in_progress(*args, **kwargs) -> Any: ...
def build_census_context(*args, **kwargs) -> Any: ...
def channel_credentials_alts(*args, **kwargs) -> Any: ...
def channel_credentials_compute_engine(*args, **kwargs) -> Any: ...
def channel_credentials_insecure(*args, **kwargs) -> Any: ...
def channel_credentials_local(*args, **kwargs) -> Any: ...
def channelz_get_channel(*args, **kwargs) -> Any: ...
def channelz_get_server(*args, **kwargs) -> Any: ...
def channelz_get_server_sockets(*args, **kwargs) -> Any: ...
def channelz_get_servers(*args, **kwargs) -> Any: ...
def channelz_get_socket(*args, **kwargs) -> Any: ...
def channelz_get_subchannel(*args, **kwargs) -> Any: ...
def channelz_get_top_channels(*args, **kwargs) -> Any: ...
def compression_algorithm_name(*args, **kwargs) -> Any: ...
def dump_xds_configs(*args, **kwargs) -> Any: ...
def enter_user_request_generator(*args, **kwargs) -> Any: ...
def execute_batch(*args, **kwargs) -> Any: ...
def fork_handlers_and_grpc_init(*args, **kwargs) -> Any: ...
def fork_register_channel(*args, **kwargs) -> Any: ...
def fork_unregister_channel(*args, **kwargs) -> Any: ...
def generator_to_async_generator(*args, **kwargs) -> Any: ...
def get_deadline_from_context(*args, **kwargs) -> Any: ...
def get_fork_epoch(*args, **kwargs) -> Any: ...
def get_working_loop(*args, **kwargs) -> Any: ...
def gevent_decrement_channel_count(*args, **kwargs) -> Any: ...
def gevent_increment_channel_count(*args, **kwargs) -> Any: ...
def init_grpc_aio(*args, **kwargs) -> Any: ...
def init_grpc_gevent(*args, **kwargs) -> Any: ...
def insecure_server_credentials(*args, **kwargs) -> Any: ...
def install_context_from_request_call_event(*args, **kwargs) -> Any: ...
def is_fork_support_enabled(*args, **kwargs) -> Any: ...
def peer_identities(*args, **kwargs) -> Any: ...
def peer_identity_key(*args, **kwargs) -> Any: ...
def raise_if_not_valid_trailing_metadata(*args, **kwargs) -> Any: ...
def return_from_user_request_generator(*args, **kwargs) -> Any: ...
def run_spawn_greenlets(*args, **kwargs) -> Any: ...
def schedule_coro_threadsafe(*args, **kwargs) -> Any: ...
def server_certificate_config_ssl(*args, **kwargs) -> Any: ...
def server_credentials_alts(*args, **kwargs) -> Any: ...
def server_credentials_local(*args, **kwargs) -> Any: ...
def server_credentials_ssl(*args, **kwargs) -> Any: ...
def server_credentials_ssl_dynamic_cert_config(*args, **kwargs) -> Any: ...
def set_async_callback_func(*args, **kwargs) -> Any: ...
def set_census_context_on_call(*args, **kwargs) -> Any: ...
def shutdown_await_next_greenlet(*args, **kwargs) -> Any: ...
def shutdown_grpc_aio(*args, **kwargs) -> Any: ...
def spawn_greenlets(*args, **kwargs) -> Any: ...
def uninstall_context(*args, **kwargs) -> Any: ...
def xds_server_credentials(*args, **kwargs) -> Any: ...
